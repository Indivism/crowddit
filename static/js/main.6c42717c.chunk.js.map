{"version":3,"sources":["logo.svg","serviceWorker.js","constants.js","components/presentationals/login.js","actions/index.js","components/containers/login.js","components/presentationals/navbar.js","components/containers/navbar.js","components/containers/AccountInitAlert.js","components/presentationals/AccountInitAlert.js","App.js","components/containers/AuthAlert.js","components/presentationals/AuthAlert.js","components/containers/revoke.js","components/presentationals/settings/revoke.js","components/presentationals/settings/index.js","components/containers/settings.js","components/containers/createAccount.js","components/presentationals/createAccount.js","routes.js","reducers/app.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","HEROKU","ModalExample","props","className","console","log","Container","Modal","isOpen","modal","toggle","centered","style","height","id","marginLeft","paddingTop","Form","onSubmit","e","preventDefault","login","username","document","getElementById","value","password","FormGroup","Label","for","hidden","Input","type","name","placeholder","invalidLoginAttempt","Button","Alert","color","dismissLoginAttemptAlert","fontSize","to","paddingLeft","fontWeight","usernameBlur","payload","a","url","C","querystring","stringify","options","method","fetch","then","response","json","catch","err","status","passwordBlur","createUser","trim","cookie","res","url_associations","crowddit","data","toggleCreateAccountAlert","auth","auth_url","returnFromReddit","getStore","getState","app","hash","router","substring","indexOf","revokeAuth","connect","store","ownProps","showLoginModal","dispatch","fields","A","Login","NavigationBar","useState","setIsOpen","page","Navbar","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","setPage","cursor","NavbarText","paddingRight","outline","logout","test","init_data","persistor","purge","showInitAlert","initAccountAlert","padding","App","visible","showAuthAlert","dismiss","toString","includes","Fade","in","tag","marginBottom","Settings","this","onUpdate","isAuthenticated","Jumbotron","React","Component","validUsername","validPassword","toggleUserAlert","createUserAlert","authenticated","marginTop","onBlur","target","invalid","valid","FormFeedback","FormText","secondary","exact","path","INITIAL","slice","state","action","createRootReducer","history","combineReducers","connectRouter","createBrowserHistory","middlewares","routerMiddleware","thunk","logger","enhancers","applyMiddleware","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","rootReducer","createStore","undefined","compose","persistStore","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,kJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oHCMKC,EACH,4CADGA,EAEC,gDC2BGC,EA/CM,SAACC,GAAW,IAE7BC,EACED,EADFC,UAKF,OAFAC,QAAQC,IAAIH,GAGV,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,OAAQN,EAAMO,MAAOC,OAAQR,EAAMQ,OAAQP,UAAWA,EAAWQ,UAAQ,GAC5E,yBAAKR,UAAU,MAAMS,MAAO,CAACC,OAAQ,MACjC,yBAAKV,UAAU,WAAWW,GAAG,uBAC7B,yBAAKX,UAAU,MAAMS,MAAO,CAACG,WAAY,SACrC,yBAAKZ,UAAU,MAAMW,GAAG,cAAxB,WACA,yBAAKX,UAAU,MAAMS,MAAO,CAACI,WAAY,SACrC,kBAACC,EAAA,EAAD,CAAMC,SAAW,SAAAC,GAAOA,EAAEC,iBAAkBlB,EAAMmB,MAAM,CACpDC,SAAUC,SAASC,eAAe,iBAAiBC,MACnDC,SAAUH,SAASC,eAAe,iBAAiBC,UAEnD,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,eAAeC,QAAM,GAAhC,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWnB,GAAG,gBAAgBoB,YAAY,cAG1E,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBAAgBC,QAAM,GAAjC,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWnB,GAAG,gBAAgBoB,YAAY,eAExEhC,EAAMiC,qBAAuB,kBAACC,EAAA,EAAD,CAAQxB,MAAO,CAACC,OAAQ,QAASC,GAAG,qBAApC,WAC/B,kBAACuB,EAAA,EAAD,CACAC,MAAM,SACN9B,OAAQN,EAAMiC,oBACdzB,OAAQ,WAAQR,EAAMqC,6BAHtB,kCAOR,yBAAKpC,UAAU,MAAMS,MAAO,CAAC4B,SAAU,QAASxB,WAAY,SACxD,iDACA,kBAAC,IAAD,CAAMyB,GAAG,cAAc7B,MAAO,CAAC8B,YAAa,SAAUC,WAAY,SAAlE,mB,iBCnCbC,G,MAAY,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,yDAEP,KAAZD,EAFmB,yCAGX,CAAEb,KFFI,YEDK,cAKlBe,EAAMC,EAAc,kBAAoBC,IAAYC,UAAU,CAAC5B,SAAUuB,IAEzEM,EAAU,CACVC,OAAQ,OARU,SAWDC,MAAMN,EAAKI,GAC3BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,KACbC,OAAM,SAAAC,GAAG,OAAItD,QAAQC,IAAIqD,MAdR,YAWlBH,EAXkB,UAePA,EAASI,OAfF,0CAgBX,CAAC3B,KFxBW,gBEwBYa,QAAS,CAAEc,OAA2B,WAAnBJ,EAASI,UAhBzC,iCAkBX,CAAC3B,KF1BW,gBE0BYa,QAAS,CAAEc,QAAQ,KAlBhC,4CAAH,uDAsBZC,EAAY,uCAAG,WAAMf,GAAN,mBAAAC,EAAA,yDACP,KAAZD,EADmB,yCAEX,CAAEb,KFvBI,YEqBK,cAIlBe,EAAMC,EAAc,kBAAoBC,IAAYC,UAAU,CAACxB,SAAUmB,IAEzEM,EAAU,CACVC,OAAQ,OAPU,SAUDC,MAAMN,EAAKI,GAC3BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,KACbC,OAAM,SAAAC,GAAG,OAAItD,QAAQC,IAAIqD,MAbR,YAUlBH,EAVkB,UAePA,EAASI,OAfF,0CAgBX,CAAC3B,KF7CW,gBE6CYa,QAAS,CAAEc,OAA4B,YAApBJ,EAASI,UAhBzC,iCAkBX,CAAC3B,KF/CW,gBE+CYa,QAAS,CAAEc,QAAQ,KAlBhC,4CAAH,sDAsBZE,EAAU,uCAAG,oCAAAf,EAAA,yDAEhBxB,EAAWC,SAASC,eAAe,kBAAkBC,MAAMqC,OAC3DpC,EAAWH,SAASC,eAAe,kBAAkBC,MAAMqC,OAE/D1D,QAAQC,IAAIiB,EAAUI,GAEnBJ,IAAaI,GAAyB,KAAbJ,EAPR,yCAQT,CAAEU,KFpDc,sBE4CP,cAUhBe,EAAMC,EAAc,eAAiBC,IAAYC,UAAU,CAAC5B,WAAUI,aAEtEyB,EAAU,CACVC,OAAQ,OAbQ,SAgBCC,MAAMN,EAAKI,GAC3BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,KACbC,OAAM,SAAAC,GAAG,OAAItD,QAAQC,IAAIqD,MAnBV,UAgBhBH,EAhBgB,OAqBpBnD,QAAQC,IAAIkD,GACW,YAApBA,EAASI,OAtBQ,wBAuBhBpC,SAASwC,OAAS,YAAcR,EAASjC,SAvBzB,kBAwBT,CAACU,KF1ES,cE0EYa,QAAS,CAAEc,QAAQ,EAAMrC,cAxBtC,iCA0BT,CAACU,KF5ES,cE4EYa,QAAS,CAAEc,QAAQ,EAAOrC,cA1BvC,4CAAH,qDA0CVD,EAAK,uCAAG,yCAAAyB,EAAA,6DAASxB,EAAT,EAASA,SAAUI,EAAnB,EAAmBA,SAE9BqB,EAAMC,EAAc,UAAYC,IAAYC,UAAU,CAAC5B,WAAUI,aAEjEyB,EAAU,CACVC,OAAQ,OALG,SAQMC,MAAMN,EAAKI,GAC3BG,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAE,GAAI,OAAIA,KAVH,UAQXD,EARW,OAYfnD,QAAQC,IAAI,WAAYkD,GAED,YAApBA,EAASI,OAdG,wBAgBPM,EAAmBjB,EAAc,oBAAsBC,IAAYC,UAAU,CAAEgB,SAAUX,EAASjC,WAhB3F,UAiBM+B,MAAMY,EAAkBd,GACpCG,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAE,GAAI,OAAIA,KAnBP,WAiBPW,EAjBO,OAqBX/D,QAAQC,IAAI,SAAU8D,IACnBA,EAAKA,KAtBG,0CAuBA,CAAEnC,KFhHF,QEgHiBa,QAAS,CAAEvB,SAAUiC,EAASjC,YAvB/C,iCAyBA,CAAEU,KF5GS,mBE4GiBa,QAAS,CAAEvB,SAAUiC,EAASjC,YAzB1D,yDA4BJ,CAAEU,KFpHU,kBEwFR,4CAAH,sDAkCLoC,EAA2B,WAClC,IAAI9C,EAAsE,KAA3DC,SAASC,eAAe,kBAAkBC,MAAMqC,OAC3DpC,EAAsE,KAA3DH,SAASC,eAAe,kBAAkBC,MAAMqC,OAE/D,OADA1D,QAAQC,IAAI,aAAciB,EAAUI,GACjCJ,GAAYI,EACJ,CAAEM,KF7Hc,qBE+HhB,CAAEA,KF9HI,YEoIVqC,EAAI,uCAAG,WAAMH,GAAN,iBAAApB,EAAA,6DAEVK,EAAU,CACVC,OAAQ,OAGRL,EAAMC,EAAkB,SAAWC,IAAYC,UAAU,CAAEgB,aAE/Db,MAAMN,EAAKI,GACNG,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAE,GACCA,EAAKc,WACJ1E,OAAOC,SAAW2D,EAAKc,aAZrB,kBAgBP,CACHtC,KFlJQ,SEiIE,2CAAH,sDAyBJuC,EAAgB,uCAAG,kCAAAzB,EAAA,6DAEpBxB,EAAakD,KAAWC,WAAWC,IAAnCpD,SAEFyB,EAAMC,EAAc,oBAAsBC,IAAYC,UAAU,CAAEgB,SAAU5C,IAJtD,SAMT+B,MAAMN,GAClBO,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAE,GAAI,OAAIA,KARQ,UAWP,YAXO,OAWlBG,OAXkB,yCAYf,CAAE3B,KFpKS,eEoKaa,QAAS,WAZlB,OAgBtB8B,EAAOH,KAAWC,WAAWG,OAAO/E,SAAS8E,KAC7ChB,EAASgB,EAAKE,UAAUF,EAAKG,QAAQ,KAAO,GAjBtB,KAmBnBnB,EAnBmB,OAoBjB,YApBiB,QAsBjB,aAtBiB,0DAuBX,CAAE3B,KF9KE,YE8KiBa,QAASc,IAvBnB,iCAyBX,CAAE3B,KFtLA,YE6JS,4CAAH,qDA8BhB+C,EAAU,uCAAG,8BAAAjC,EAAA,6DAEhBC,EAAMC,EAAc,WAAaC,IAAYC,UAAU,CAAEgB,SAAUM,KAAWC,WAAWC,IAAIpD,WAE7F6B,EAAU,CACVC,OAAQ,OALQ,SAQdC,MAAMN,EAAKI,GAChBG,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAE,GAAI,OAAIpD,QAAQC,IAAImD,MAVN,gCAYb,CAAExB,KFhMY,gBEoLD,2CAAH,qDCrLNgD,eAXS,SAACC,EAAOC,GAAR,MAAsB,CAC1CzE,MAAOwE,EAAMP,IAAIS,eACjBhD,oBAAqB8C,EAAMP,IAAIvC,wBAGR,SAACiD,GAAD,MAAe,CACtC1E,OAAQ,kBAAM0E,EDLP,CAAEpD,KFNa,kBGYtBX,MAAM,WAAD,4BAAE,WAAMgE,GAAN,SAAAvC,EAAA,kEAAgBsC,EAAhB,SAA+BE,EAAQD,GAAvC,uGAAF,mDAAC,GACN9C,yBAA0B,kBAAM6C,EDkHE,CAAEpD,KFvHP,4BGQlBgD,CAA6CO,G,+ECkC7CC,EApCO,SAACtF,GAAW,IAAD,EACDuF,oBAAS,GADR,mBACtBjF,EADsB,KACdkF,EADc,KAM7B,OAFFtF,QAAQC,IAAIH,GAGV,6BACkB,cAAfA,EAAMyF,MAAwB,kBAAC,IAAD,CAAUlD,GAAG,cAC5B,WAAfvC,EAAMyF,MAAqB,kBAAC,IAAD,CAAUlD,GAAG,WACzC,kBAACmD,EAAA,EAAD,CAAQtD,MAAM,QAAQuD,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAM,wCAAnB,YACA,kBAACC,EAAA,EAAD,CAAeC,QATJ,kBAAMR,GAAWlF,MAU5B,kBAAC2F,EAAA,EAAD,CAAU3F,OAAQA,EAAQ4F,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKlG,UAAU,UAAUiG,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,WAAd,UAEF,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,wCAAd,WAEA9F,EAAM6D,QAAU,kBAACuC,EAAA,EAAD,KAChB,kBAACC,EAAA,EAAD,CAASL,QAAS,WAAQhG,EAAMsG,QAAQ,cAAgB5F,MAAO,CAAC6F,OAAQ,YAAxE,eAKLvG,EAAM6D,QAAU,kBAAC2C,EAAA,EAAD,CAAY9F,MAAO,CAAC+F,aAAc,SAAUzG,EAAMoB,UAClEpB,EAAM6D,QAAU,kBAAC3B,EAAA,EAAD,CAAQwE,SAAO,EAACtE,MAAM,YAAY4D,QAAU,kBAAMhG,EAAM2G,WAAxD,YACf3G,EAAM6D,QAAU,kBAAC3B,EAAA,EAAD,CAAQwE,SAAO,EAACtE,MAAM,YAAY4D,QAAU,kBAAMhG,EAAMmB,UAAxD,aCvBX2D,eAfS,SAACC,EAAOC,GAAR,MAAsB,CAC1C4B,KAAM7B,EAAMP,IAAIqC,UAChBhD,OAAQkB,EAAMP,IAAIX,OAClBzC,SAAU2D,EAAMP,IAAIpD,SACpBqE,KAAMV,EAAMP,IAAIiB,SAGO,SAACP,GACxB,MAAO,CACH/D,MAAO,WAAQ+D,EHRZ,CAAEpD,KFNa,kBKelB6E,OAAQ,WAAQzB,GH0EpB7D,SAASwC,OAAS,oDAClBnE,OAAOC,SAAW,yCAClBD,OAAOoH,UAAUC,QACV,CAAEjF,KFvFO,aKWZwE,QAAS,SAAAb,GAAUP,EH4HN,SAAAO,GAAI,MAAK,CAAE3D,KFjIV,WEiI4Ba,QAAS8C,GG5HvBL,CAAUK,QAI/BX,CAA6CQ,GCP7CR,eARS,SAACC,EAAOC,GAAR,MAAsB,CAC1CgC,cAAejC,EAAMP,IAAIyC,qBAGF,SAAC/B,GAAD,MAAe,KAI3BJ,ECTA,SAAA9E,GAEP,OADJE,QAAQC,IAAIH,GACDA,EAAMgH,cAAiB,yBAAK/G,UAAU,mBACzC,yBAAKA,UAAU,6BAA6BS,MAAO,CAACwG,QAAS,SACzD,yBAAKjH,UAAY,aACb,kBAACkC,EAAA,EAAD,CAAOlC,UAAU,cAAcmC,MAAM,QAArC,4FAAqI,kBAAC,IAAD,CAAMnC,UAAU,aAAasC,GAAG,aAAhC,oBAArI,QAGF,iCCIH4E,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,yCCESrC,gBARS,SAACC,EAAOC,GAAR,MAAsB,CAC1CoC,QAASrC,EAAMP,IAAI6C,kBAGI,SAACnC,GAAD,MAAe,CACtCoC,QAAS,WAAQpC,EPyJgB,CAAEpD,KFrJT,2BSDfgD,ECVA,SAAA9E,GAAK,OAChB,yBAAKC,UAAU,mBACVP,OAAOC,SAAS4H,WAAWC,SAAS,mBACjC,yBAAKvH,UAAU,8BAA8BS,MAAO,CAACwG,QAAS,SAC9D,yBAAKjH,UAAY,SACb,kBAACkC,EAAA,EAAD,CAAOlC,UAAU,cAAcmC,MAAM,UAAU9B,OAAQN,EAAMoH,QAAS5G,OAAQ,kBAAMR,EAAMsH,YAA1F,+GAIP5H,OAAOC,SAAS4H,WAAWC,SAAS,eACjC,yBAAKvH,UAAU,8BAA8BS,MAAO,CAACwG,QAAS,SAC9D,yBAAKjH,UAAY,SACb,kBAACkC,EAAA,EAAD,CAAOlC,UAAU,cAAcmC,MAAM,SAAS9B,OAAQN,EAAMoH,QAAS5G,OAAQ,kBAAMR,EAAMsH,YAAzF,6EAIP5H,OAAOC,SAAS4H,WAAWC,SAAS,mBACjC,yBAAKvH,UAAU,8BAA8BS,MAAO,CAACwG,QAAS,SAC9D,yBAAKjH,UAAY,SACb,kBAACkC,EAAA,EAAD,CAAOlC,UAAU,cAAcmC,MAAM,UAAU9B,OAAQN,EAAMoH,QAAS5G,OAAQ,kBAAMR,EAAMsH,YAA1F,wD,SCTDxC,gBARS,SAACC,EAAOC,GAAR,MAAsB,CAC1Cb,KAAMY,EAAMP,IAAIL,SAGO,SAACe,GAAD,MAAe,CACtCL,WAAW,WAAD,4BAAE,sBAAAjC,EAAA,kEAAYsC,EAAZ,SAA4BE,IAA5B,uGAAF,kDAAC,MAGAN,ECVC,SAAA9E,GAAK,OACjB,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,8BACX,kBAACwH,GAAA,EAAD,CAAMC,GAAI1H,EAAMmE,KAAMwD,IAAI,KAAK1H,UAAU,QACrC,kBAACiC,EAAA,EAAD,CAAQE,MAAM,YAAY4D,QAAS,kBAAMhG,EAAM6E,cAAenE,MAAO,CAAEkH,aAAc,SAArF,qCCgCDC,G,mLA9BPC,KAAK9H,MAAM+H,WACX7H,QAAQC,IAAI,SAAU2H,KAAK9H,S,+BAGrB,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,yBAAKC,UAAY,kBAAkBS,MAAO,CAACwG,QAAS,SAChD,yBAAKjH,UAAU,8BACX,yBAAKA,UAAU,iCACT6H,KAAK9H,MAAMgI,iBAAmB,kBAACC,EAAA,EAAD,KAC5B,wBAAIhI,UAAU,aAAd,4BACA,uBAAGA,UAAU,QAAb,yFACA,6BACA,kGACA,uBAAGA,UAAU,QACT,kBAACiC,EAAA,EAAD,CAAQE,MAAM,UAAU4D,QAAS,WAAQ,EAAKhG,MAAMmE,KAAK,EAAKnE,MAAMgE,YAApE,qBAGP8D,KAAK9H,MAAMgI,iBAAmB,kBAAC,GAAD,c,GAxBpCE,IAAMC,WCSdrD,gBAVS,SAAAC,GAAK,MAAK,CAC9Bf,SAAUe,EAAMP,IAAIpD,SACpB4G,gBAAiBjD,EAAMP,IAAIL,SAGJ,SAAAe,GAAQ,MAAK,CACpCf,KAAK,WAAD,4BAAE,WAAMlD,GAAN,SAAA2B,EAAA,kEAAasC,EAAb,SAA6BE,EAAOnE,GAApC,6EAAF,mDAAC,GACL8G,SAAS,WAAD,4BAAE,sBAAAnF,EAAA,kEAAcsC,EAAd,SAA8BE,IAA9B,6EAAF,kDAAC,MAGEN,CAA6C+C,I,oBCI7C/C,gBAdS,SAACC,EAAOC,GAAR,MAAsB,CAC1CoD,cAAerD,EAAMP,IAAI4D,cACzBC,cAAetD,EAAMP,IAAI6D,cACzBC,gBAAiBvD,EAAMP,IAAI+D,gBAC3BC,cAAezD,EAAMP,IAAIX,WAGF,SAACqB,GAAD,MAAe,CACtCxC,aAAa,WAAD,4BAAE,WAAMzB,GAAN,SAAA2B,EAAA,kEAAYsC,EAAZ,SAA2BE,EAAenE,GAA1C,uGAAF,mDAAC,GACbyC,aAAa,WAAD,4BAAE,WAAMzC,GAAN,SAAA2B,EAAA,kEAAWsC,EAAX,SAA0BE,EAAenE,GAAzC,uGAAF,mDAAC,GACb0C,WAAW,WAAD,4BAAE,WAAM1C,GAAN,SAAA2B,EAAA,kEAAasC,EAAb,SAA4BE,IAA5B,kCAA6CF,EbqElC,CACvBpD,KFjFgB,WeWJ,2CAAF,mDAAC,GACXyG,gBAAgB,WAAD,4BAAE,sBAAA3F,EAAA,sEAAoBsC,EAASE,KAA7B,2CAAF,kDAAC,MAGLN,ECbA,SAAA9E,GAGX,OADAE,QAAQC,IAAI,WAAYH,GAEpB,6BACKA,EAAMwI,eAAiB,kBAAC,IAAD,CAAUjG,GAAG,MACrC,kBAAC,EAAD,MACA,yBAAKtC,UAAU,YAAYS,MAAO,CAAC+H,UAAW,SAC9C,kBAAC1H,EAAA,EAAD,CAAMC,SAAQ,uCAAE,WAAMC,GAAN,SAAA2B,EAAA,6DAAa3B,EAAEC,iBAAf,SAAwClB,EAAM2D,aAA9C,2CAAF,uDACV,kBAAClC,EAAA,EAAD,CAAWiH,OAAS,SAAAzH,GAAC,OAAIjB,EAAM0C,aAAazB,EAAE0H,OAAOpH,MAAMqC,UACvD,kBAAClC,EAAA,EAAD,CAAOC,IAAI,gBAAX,YACA,kBAACE,EAAA,EAAD,CACIjB,GAAG,iBACHgI,SAAmC,IAAxB5I,EAAMoI,eAAsF,KAA3D/G,SAASC,eAAe,kBAAkBC,MAAMqC,OAC5FiF,OAAiC,IAAxB7I,EAAMoI,gBAClBpI,EAAMoI,eAAiB,kBAACU,GAAA,EAAD,CAAcD,OAAK,GAAnB,uCACC,IAAxB7I,EAAMoI,eAA2B,kBAACU,GAAA,EAAD,CAAcF,SAAO,GAArB,8CAClC,kBAACG,GAAA,EAAD,4EAEJ,kBAACtH,EAAA,EAAD,CAAWiH,OAAS,SAAAzH,GAAC,OAAIjB,EAAM0D,aAAazC,EAAE0H,OAAOpH,MAAMqC,UACvD,kBAAClC,EAAA,EAAD,CAAOC,IAAI,mBAAX,YACA,kBAACE,EAAA,EAAD,CACIjB,GAAG,iBACHgI,SAAmC,IAAxB5I,EAAMqI,eAAsF,KAA3DhH,SAASC,eAAe,kBAAkBC,MAAMqC,OAC5FiF,OAAiC,IAAxB7I,EAAMqI,gBAClBrI,EAAMqI,eAAiB,kBAACS,GAAA,EAAD,CAAcD,OAAK,GAAnB,qCACC,IAAxB7I,EAAMqI,eAA2B,kBAACS,GAAA,EAAD,CAAcF,SAAO,GAArB,uDAClC,kBAACG,GAAA,EAAD,qFAEH/I,EAAMsI,iBAAmB,kBAACnG,EAAA,EAAD,yDAC1B,kBAACD,EAAA,EAAD,CACItB,GAAG,oBACHoI,WAAS,GACL,kBAAC,IAAD,CACAzG,GAAIvC,EAAMsI,gBAAkB,cAAiB,IAC7C5H,MAAO,CAAE0B,MAAO,SAChB4D,QAAS,kBAAMhG,EAAMuI,oBAHrB,kBC1BT,qBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,eACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAElB,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,U,mFCvBVC,GAAU,CACZlE,gBAAgB,EAChBmD,cAAe,KACfvE,OAAQxC,SAASwC,OAAO2D,SAAS,aACjCpG,SAAUC,SAASwC,OAAOuF,MAAM/H,SAASwC,OAAOe,QAAQ,YAAc,GACtE3C,qBAAqB,EACrBsG,iBAAiB,EACjB9C,KAAM,IACNwB,kBAAkB,EAClBI,eAAe,EACflD,MAAM,GAGK,cAA8B,IAA7BkF,EAA4B,uDAApBF,GAASG,EAAW,uCACxC,OAAOA,EAAOxH,MACV,IlBjBkB,ekBkBd,OAAO,gBACAuH,EADP,CAEIpE,gBAAiBoE,EAAMpE,eACvBhD,qBAAqB,IAE7B,IlBtBmB,gBkBuBf,OAAO,gBACAoH,EADP,CAEIjB,cAAekB,EAAO3G,QAAQc,OAC9B8E,iBAAiB,IAEzB,IlB3BmB,gBkB4Bf,OAAO,gBACAc,EADP,CAEIhB,cAAeiB,EAAO3G,QAAQc,OAC9B8E,iBAAiB,IAEzB,IlB/BY,SkBgCR,OAAO,gBACAc,EADP,CAEIxF,OAAQxC,SAASwC,OAAO2D,SAAS,eAEzC,IlBrCiB,ckBsCb,OAAO,gBACA6B,EADP,CAEIjI,SAAUkI,EAAO3G,QAAQvB,SACzB6D,gBAAgB,EAChBgC,kBAAkB,IAE1B,IlB1CY,SkB2CR,OAAO,gBACAkC,IAGX,IlB9CW,QkB+CP,OAAO,gBACAE,EADP,CAEIpE,gBAAgB,EAChB7D,SAAUkI,EAAO3G,QAAQvB,SACzByC,QAAQ,EACR5B,qBAAqB,EACrBgF,kBAAkB,EAClB9C,MAAM,IAGd,IlBnDsB,mBkBoDlB,OAAO,gBACAkF,EADP,CAEIpE,gBAAgB,EAChB7D,SAAUkI,EAAO3G,QAAQvB,SACzByC,QAAQ,EACR5B,qBAAqB,EACrBgF,kBAAkB,EAClB9C,MAAM,IAEd,IlBlEmB,gBkBmEf,OAAO,gBACAkF,EADP,CAEIpH,qBAAqB,IAG7B,IlBvEyB,sBkBwErB,OAAO,gBACAoH,EADP,CAEIpH,qBAAqB,IAG7B,IlB5EuB,oBkB6EnB,OAAO,gBACAoH,EADP,CAEId,iBAAiB,IAGzB,IlBhFc,WkBiFV,OAAO,gBACAc,EADP,CAEI5D,KAAM6D,EAAO3G,UAGrB,IlBnFsB,qBkBoFlB,OAAO,gBACA0G,EADP,CAEIhC,eAAe,IAEvB,IlBvFkB,ekBwFd,OAAO,gBACAgC,EADP,CAEIlF,MAAM,IAGd,IlB5Fe,YkBkGf,IlBjGiB,ckBkGb,OAAO,gBACAkF,EADP,CAEIlF,MAAM,IAId,QACI,OAAOkF,ICjHJE,GALS,SAAAC,GAAO,OAAIC,aAAgB,CAC/C/E,OAAQgF,aAAcF,GACtBhF,UCGOgF,GAAUG,eAEjBC,GAAc,CACdC,aAAiBL,IACjBM,KACAC,MAGAC,GAAY,CAACC,KAAe,WAAf,EAAmBL,KAE9BM,GAAgB,CAClBC,IAAK,OACLC,YACAC,UAAW,CAAC,WAGZC,GAAmBC,aACnBL,GACAM,GAAYhB,KAGZzE,GAAQ0F,aACRH,QACAI,EACAC,KAAO,WAAP,EAAWX,KAGXlD,GAAY8D,aAAa7F,I,GAGlB,CAAEA,SAAO+B,cC5Bd/B,G,GAAAA,MAAO+B,G,GAAAA,UACbpH,OAAOqF,MAAQA,GACfrF,OAAOoH,UAAYA,GACZ,IAAIxC,GAAW,WAAQ,OAAOS,IAErC7E,QAAQC,IAAI4E,GAAO+B,IAEnB+D,iBACE,kBAAC,IAAD,CAAU9F,MAAQA,IACd,kBAAC,KAAD,CAAiByE,QAAUA,IACzB,kBAAC,GAAD,QAGNnI,SAASC,eAAe,StB2GpB,kBAAmBwJ,WACrBA,UAAUC,cAAcC,MACrB5H,MAAK,SAAA6H,GACJA,EAAaC,gBAEd3H,OAAM,SAAA4H,GACLjL,QAAQiL,MAAMA,EAAMC,c","file":"static/js/main.6c42717c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export let TOGGLE_LOGIN = 'TOGGLE_LOGIN'\nexport let USERNAME_BLUR = 'USERNAME_BLUR'\nexport let PASSWORD_BLUR = 'PASSWORD_BLUR'\nexport let CREATE_USER = 'CREATE_USER'\nexport let COOKIE = 'COOKIE'\nexport let LOGOUT = 'LOGOUT'\nexport let LOGIN = 'LOGIN'\nexport let INVALID_LOGIN = 'INVALID_LOGIN'\nexport let DISMISS_LOGIN_ALERT = 'DISMISS_LOGIN_ALERT'\nexport let CREATE_USER_ALERT = 'CREATE_USER_ALERT'\nexport let DEFAULT = 'DEFAULT'\nexport let SET_PAGE = 'SET_PAGE'\nexport let GET_ASSOCIATIONS = 'GET_ASSOCIATIONS'\nexport let AUTH='AUTH'\nexport let DISMISS_AUTH_ALERT='DISMISS_AUTH_ALERT'\nexport let AUTH_SUCCESS = 'AUTH_SUCCESS'\nexport let AUTH_FAIL = 'AUTH_FAIL'\nexport let REVOKE_AUTH = 'REVOKE_AUTH'\nexport let PURGE = 'PURGE'\n\nexport let CHECK_CROWDDIT_AUTH_STATUS = 'CHECK_CROWDDIT_AUTH_STATUS'\n\nexport let HEROKU_BACKEND = 'https://crowddit-backend.herokuapp.com'\nexport let GH_PAGES = \"https://indivism.github.io/crowddit\"\nexport let HEROKU = {\n    db: 'https://crowddit-backend.herokuapp.com/db',\n    reddit: 'https://crowddit-backend.herokuapp.com/reddit'\n}","import React, { useState } from 'react';\nimport { Button, Modal, Container, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\nimport Blob from './blob'\nimport * as C from '../../constants'\nimport { Link } from 'react-router-dom'\n\nconst ModalExample = (props) => {\n  const {\n    className\n  } = props;\n\n  console.log(props)\n\n  return (\n    <Container>\n        <Modal isOpen={props.modal} toggle={props.toggle} className={className} centered>\n            <div className=\"row\" style={{height: 350}}>\n                <div className=\"col-sm-3\" id=\"login-gradient-box\"></div>\n                <div className=\"col\" style={{marginLeft: '1rem'}}>\n                    <div className=\"row\" id=\"login-text\">Sign in</div>\n                    <div className=\"row\" style={{paddingTop: '1rem'}}>\n                        <Form onSubmit={ e => { e.preventDefault(); props.login({\n                            username: document.getElementById('inputUsername').value, \n                            password: document.getElementById('inputPassword').value\n                            }) }}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\" hidden>Username</Label>\n                                <Input type=\"username\" name=\"username\" id=\"inputUsername\" placeholder=\"Username\" />\n                  \n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"inputPassword\" hidden>Password</Label>\n                                <Input type=\"password\" name=\"password\" id=\"inputPassword\" placeholder=\"Password\" />\n                            </FormGroup>\n                            {!props.invalidLoginAttempt && <Button style={{height: '2rem'}} id='login-text-button'>SIGN IN</Button>}\n                            <Alert \n                            color=\"danger\"\n                            isOpen={props.invalidLoginAttempt}\n                            toggle={() => { props.dismissLoginAttemptAlert() }}>\n                                Invalid username or password</Alert>\n                        </Form>\n                    </div>\n                    <div className=\"row\" style={{fontSize: \"small\", paddingTop: '1rem'}}>\n                        <p> New to Crowddit? </p>\n                        <Link to='/createUser' style={{paddingLeft: '0.5rem', fontWeight: \"bold\"}}> SIGN UP </Link>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    </Container>\n  );\n}\n\nexport default ModalExample;","import * as C from '../constants'\nimport querystring from 'query-string'\nimport { getStore } from '../index'\nimport { push } from 'react-router-redux'\n\nexport let toggleLogin = () => {\n    return { type: C.TOGGLE_LOGIN }\n}\n\nexport let usernameBlur = async payload => {\n\n    if(payload === \"\")\n        return { type: C.DEFAULT }\n\n    let url = C.HEROKU.db + \"/checkUsername?\" + querystring.stringify({username: payload})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n    if(response && response.status) {\n        return {type: C.USERNAME_BLUR, payload: { status: response.status == 'success' ? true : false }}\n    } else {\n        return {type: C.USERNAME_BLUR, payload: { status: false }}\n    }\n} \n\nexport let passwordBlur = async payload => {\n    if(payload === \"\")\n        return { type: C.DEFAULT }\n\n    let url = C.HEROKU.db + \"/checkPassword?\" + querystring.stringify({password: payload})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n\n    if(response && response.status) {\n        return {type: C.PASSWORD_BLUR, payload: { status: response.status === 'success' ? true : false }}\n    } else {\n        return {type: C.PASSWORD_BLUR, payload: { status: false }}\n    }\n}\n\nexport let createUser = async () => {\n    \n    let username = document.getElementById(\"username-input\").value.trim()\n    let password = document.getElementById(\"password-input\").value.trim()\n\n    console.log(username, password)\n\n    if(username === password && username === \"\")\n        return { type: C.CREATE_USER_ALERT }\n\n    let url = C.HEROKU.db + \"/createUser?\" + querystring.stringify({username, password})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n\n    console.log(response)\n    if(response.status === 'success') {\n        document.cookie = 'crowddit=' + response.username\n        return {type: C.CREATE_USER, payload: { status: true, username }}\n    } else {\n        return {type: C.CREATE_USER, payload: { status: false, username }}\n    }\n\n}\n\nexport let cookie = () => ({\n    type: C.COOKIE\n})\n\nexport let logout = () => {\n    document.cookie = 'crowddit' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    window.location = 'https://indivism.github.io/crowddit/#/'\n    window.persistor.purge()\n    return { type: C.LOGOUT }\n}\n\nexport let login = async ({ username, password }) => {\n\n    let url = C.HEROKU.db + \"/login?\" + querystring.stringify({username, password})\n\n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(res => res.json())\n        .then(json => json)\n    \n    console.log(\"response\", response)\n\n    if(response.status === \"success\") {\n\n        let url_associations = C.HEROKU.db + '/getAssociations?' + querystring.stringify({ crowddit: response.username })\n        let data = await fetch(url_associations, options)\n            .then(res => res.json())\n            .then(json => json)\n        \n        console.log(\"DATA: \", data)\n        if(data.data) {\n            return { type: C.LOGIN, payload: { username: response.username } }\n        } else {\n            return { type: C.GET_ASSOCIATIONS, payload: { username: response.username } }\n        }\n    } else {\n        return { type: C.INVALID_LOGIN }\n    }\n}\n\nexport let dismissLoginAlert = () => ({ type: C.DISMISS_LOGIN_ALERT })\n\nexport let toggleCreateAccountAlert = () => {\n    let username = document.getElementById(\"username-input\").value.trim() === \"\"\n    let password = document.getElementById(\"password-input\").value.trim() === \"\"\n    console.log(\"check me: \", username, password)\n    if(username && password) {\n        return { type: C.CREATE_USER_ALERT }\n    } else {\n        return { type: C.DEFAULT }\n    }\n}\n\nexport let setPage = page => ({ type: C.SET_PAGE, payload: page })\n\nexport let auth = async crowddit => {\n\n    let options = {\n        method: 'GET'\n    }\n\n    let url = C.HEROKU.reddit + '/auth?' + querystring.stringify({ crowddit })\n\n    fetch(url, options)\n        .then(res => res.json())\n        .then(json => {\n            if(json.auth_url) {\n                window.location = json.auth_url\n            }\n        })\n\n    return {\n        type: C.AUTH\n    }\n}\n\nexport let dismissAuthAlert = () => ({ type: C.DISMISS_AUTH_ALERT })\n\nexport let checkCrowdditAuthStatus = () => ({ type: C.CHECK_CROWDDIT_AUTH_STATUS })\n\nexport let returnFromReddit = async () => {\n\n    let { username } = getStore().getState().app\n\n    let url = C.HEROKU.db + '/getAssociations?' + querystring.stringify({ crowddit: username }) \n    \n    let data = await fetch(url)\n        .then(res => res.json())\n        .then(json => json)\n    \n    // Success status comes back from db -> token is stored within db\n    if(data.status === \"success\") {\n        return { type: C.AUTH_SUCCESS, payload: \"insert\" }\n    }\n\n    // Token is not store -> return the reason\n    let hash = getStore().getState().router.location.hash\n    let status = hash.substring(hash.indexOf(\"=\") + 1)\n\n    switch(status) {\n        case \"failure\":\n            return { type: C.AUTH_FAIL, payload: status }\n        case \"conflict\":\n            return { type: C.AUTH_FAIL, payload: status }\n        default:\n            return { type: C.DEFAULT }\n    }\n    \n}\n\nexport let revokeAuth = async () => {\n\n    let url = C.HEROKU.db + '/revoke?' + querystring.stringify({ crowddit: getStore().getState().app.username })\n    \n    let options = {\n        method: 'GET'\n    }\n\n    await fetch(url, options)\n    .then(res => res.json())\n    .then(json => console.log(json))\n\n    return { type: C.REVOKE_AUTH }\n}\n\n","import { connect } from 'react-redux'\nimport Login from '../presentationals/login'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    modal: store.app.showLoginModal,\n    invalidLoginAttempt: store.app.invalidLoginAttempt\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggle: () => dispatch(A.toggleLogin()),\n    login: async fields => dispatch(await A.login(fields)),\n    dismissLoginAttemptAlert: () => dispatch(A.dismissLoginAlert())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { useState } from 'react'\nimport {\n    Button,\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    NavbarText\n  } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom'\n\nconst NavigationBar = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n  console.log(props)\n\n    return (\n    <div>\n      {props.page === \"/settings\" && <Redirect to=\"/settings\" />}\n      {props.page === \"/about\" && <Redirect to=\"/about\" />}\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href={'https://indivism.github.io/crowddit/'}>crowddit</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/about/\">About</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/Indivism/crowddit\">GitHub</NavLink>\n            </NavItem>\n            { props.cookie && <NavItem>\n              <NavLink onClick={() => { props.setPage(\"/settings\") }} style={{cursor: \"pointer\"}}>Settings</NavLink>\n            </NavItem>}\n          </Nav>\n        </Collapse>\n        \n        {props.cookie && <NavbarText style={{paddingRight: \"1rem\"}}>{props.username}</NavbarText>}\n        {props.cookie && <Button outline color=\"secondary\" onClick={ () => props.logout() }>Log Out</Button>}\n        {!props.cookie && <Button outline color=\"secondary\" onClick={ () => props.login() }>Log In</Button>}\n        \n      </Navbar>\n    </div>\n    )\n}\n\nexport default NavigationBar\n","import { connect } from 'react-redux'\nimport NavigationBar from '../presentationals/navbar'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    test: store.app.init_data,\n    cookie: store.app.cookie,\n    username: store.app.username,\n    page: store.app.page\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        login: () => { dispatch(A.toggleLogin()) },\n        logout: () => { dispatch(A.logout()) },\n        setPage: page => { dispatch(A.setPage(page)) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar)","import { connect } from 'react-redux'\nimport AccountInitAlert from '../presentationals/AccountInitAlert'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    showInitAlert: store.app.initAccountAlert\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountInitAlert)","import React from 'react'\nimport { Alert } from 'reactstrap'\nimport { Link } from 'react-router-dom'\n\nexport default props => {\n    console.log(props)\n        return props.showInitAlert ? (<div className=\"container-fluid\">\n            <div className=\"row justify-content-center\" style={{padding: '1rem'}}>\n                <div className = \"col-sm-10\">\n                    <Alert className=\"text-center\" color=\"info\">To use Crowddit, you need to authenticate your Reddit account. Do so within the Crowddit <Link className=\"alert-link\" to=\"/settings\">account settings</Link>.</Alert>\n                </div>\n            </div>\n        </div>) : <div></div>\n}","import React from 'react';\nimport logo from './logo.svg';\nimport Login from './components/containers/login'\nimport NavigationBar from './components/containers/navbar'\nimport AccountInitAlert from './components/containers/AccountInitAlert'\n\nfunction App() {\n  return (\n    <div>\n      <NavigationBar />\n      <Login />\n      <AccountInitAlert />\n    </div>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux'\nimport AuthAlert from '../presentationals/AuthAlert'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    visible: store.app.showAuthAlert\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dismiss: () => { dispatch(A.dismissAuthAlert()) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthAlert)","import React from 'react'\nimport { Alert } from 'reactstrap';\n\nexport default props => (\n    <div className=\"container-fluid\">\n        {window.location.toString().includes(\"success=insert\") && (\n            <div className=\"row  justify-content-center\" style={{padding: '1rem'}}>\n            <div className = \"col-6\">\n                <Alert className=\"text-center\" color=\"success\" isOpen={props.visible} toggle={() => props.dismiss()}>Successfully authenticated Reddit. At any time, you may revoke Crowddit's access within account settings.</Alert>\n            </div>\n        </div>\n        )}\n        {window.location.toString().includes(\"error=fail\") && (\n            <div className=\"row  justify-content-center\" style={{padding: '1rem'}}>\n            <div className = \"col-6\">\n                <Alert className=\"text-center\" color=\"danger\" isOpen={props.visible} toggle={() => props.dismiss()}>Hmm. Crowddit could not connect to Reddit. Try to join the Crowd again.</Alert>\n            </div>\n        </div>\n        )}\n        {window.location.toString().includes(\"error=conflict\") && (\n            <div className=\"row  justify-content-center\" style={{padding: '1rem'}}>\n            <div className = \"col-6\">\n                <Alert className=\"text-center\" color=\"warning\" isOpen={props.visible} toggle={() => props.dismiss()}>There appears to be an internal service error.</Alert>\n            </div>\n        </div>\n        )}\n    </div>\n)","import { connect } from 'react-redux'\nimport Revoke from '../presentationals/settings/revoke'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    auth: store.app.auth\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    revokeAuth: async () => dispatch( await A.revokeAuth())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Revoke)","import React from 'react'\nimport { Collapse, Button, CardBody, Card, Fade } from 'reactstrap';\n\nexport default  props => (\n    <div className=\"container-fluid\">\n        <div className=\"row justify-content-center\">\n            <Fade in={props.auth} tag=\"h5\" className=\"mt-3\">\n                <Button color=\"secondary\" onClick={() => props.revokeAuth() } style={{ marginBottom: '1rem' }}>Revoke Crowddit Permissions</Button>\n            </Fade>\n        </div>\n    </div>\n)","import React from 'react'\nimport NavigationBar from '../../containers/navbar'\nimport { Nav, NavItem, NavLink, Jumbotron, Button, Form } from 'reactstrap';\nimport AuthAlert from '../../containers/AuthAlert'\nimport Revoke from '../../containers/revoke'\n\nclass Settings extends React.Component {\n\n    componentDidUpdate() {\n        this.props.onUpdate()\n        console.log(\"CHECK:\", this.props)\n    }\n\n    render() {\n        return (\n            <div>\n                <NavigationBar />\n                <AuthAlert />\n                <div className = \"container-fluid\" style={{padding: '3rem'}}>\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-6 justify-content-center\">\n                            {!this.props.isAuthenticated && <Jumbotron>\n                                <h1 className=\"display-5\">Authenticate your Reddit</h1>\n                                <p className=\"lead\">Crowddit uses Reddit's API to uncover other subreddits that you may be interested in.</p>\n                                <hr />\n                                <p>Tokenized access ensures Crowddit will never ask for your password.</p>\n                                <p className=\"lead\">\n                                    <Button color=\"primary\" onClick={() => { this.props.auth(this.props.crowddit) }}>Join the Crowdd</Button>\n                                </p>\n                            </Jumbotron>}\n                            {this.props.isAuthenticated && <Revoke />}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Settings","import { connect } from 'react-redux'\nimport Settings from '../presentationals/settings'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = store => ({\n    crowddit: store.app.username,\n    isAuthenticated: store.app.auth\n})\n\nconst mapDispatchToProps = dispatch => ({\n    auth: async e => { dispatch( await A.auth(e)) },\n    onUpdate: async () => { dispatch( await A.returnFromReddit() ) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings)","import { connect } from 'react-redux'\nimport createAccount from '../presentationals/createAccount'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    validUsername: store.app.validUsername,\n    validPassword: store.app.validPassword,\n    toggleUserAlert: store.app.createUserAlert,\n    authenticated: store.app.cookie\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    usernameBlur: async e =>  dispatch(await A.usernameBlur(e)),\n    passwordBlur: async e => dispatch(await A.passwordBlur(e)),\n    createUser: async e => { dispatch(await A.createUser()); dispatch(A.cookie()) },\n    createUserAlert: async () => { await dispatch(A.toggleCreateAccountAlert()) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(createAccount)","import React from 'react'\nimport NavigationBar from '../containers/navbar'\nimport { Form, FormGroup, Label, Input, FormFeedback, FormText, Button, Alert } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom'\n\n\nexport default props => {\n\n    console.log(\"check me\", props)\n    return (\n        <div>\n            {props.authenticated && <Redirect to=\"/\" />}\n            <NavigationBar  />\n            <div className=\"container\" style={{marginTop: '3rem'}}>\n            <Form onSubmit={async e => { e.preventDefault();  await props.createUser(); }}>\n                <FormGroup onBlur={ e => props.usernameBlur(e.target.value.trim()) }>\n                    <Label for=\"exampleEmail\">Username</Label>\n                    <Input \n                        id=\"username-input\" \n                        invalid = {props.validUsername === false && document.getElementById(\"username-input\").value.trim() !== \"\"} \n                        valid = {props.validUsername === true} />\n                    {props.validUsername && <FormFeedback valid>Sweet! That username is available.</FormFeedback>}\n                    {props.validUsername === false && <FormFeedback invalid>That username is invalid or already taken.</FormFeedback>}\n                    <FormText>Usernames can contain lowercase and uppercase letters and numbers.</FormText>\n                </FormGroup>\n                <FormGroup onBlur={ e => props.passwordBlur(e.target.value.trim()) } >\n                    <Label for=\"examplePassword\">Password</Label>\n                    <Input \n                        id=\"password-input\" \n                        invalid = {props.validPassword === false && document.getElementById(\"password-input\").value.trim() !== \"\"} \n                        valid = {props.validPassword === true} />\n                    {props.validPassword && <FormFeedback valid>Great! This is a valid password.</FormFeedback>}\n                    {props.validPassword === false && <FormFeedback invalid>Oh no! That password is invalid. Please try again. </FormFeedback>}\n                    <FormText>Passwords must contain at least one numeric character and 1 capital letter.</FormText>\n                </FormGroup>\n                {props.toggleUserAlert && <Alert>Please input a username and password to sign in.</Alert>}\n                <Button \n                    id='login-text-button'\n                    secondary>\n                        <Link \n                        to={props.toggleUserAlert ? \"/createUser\"  : \"/\"} \n                        style={{ color: 'white' }} \n                        onClick={() => props.createUserAlert()}>\n                            SIGN UP</Link>\n                </Button>\n            </Form>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport {\n    // BrowserRouter as Router,\n    Switch,\n    Route,\n    HashRouter as Router,\n    Link\n  } from \"react-router-dom\"\n\nimport App from './App'\nimport Settings from './components/containers/settings'\nimport CreateAccount from './components/containers/createAccount'\n\nexport default () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/createUser\">\n                <CreateAccount />\n            </Route>\n            <Route exact path=\"/settings\">\n                <Settings />\n            </Route>\n            <Route exact path=\"/about\">\n            </Route>\n            <Route path=\"/\">\n                <App />\n            </Route>\n        </Switch>\n    </Router>\n)","import * as C from '../constants'\n\nconst INITIAL = {\n    showLoginModal: false,\n    validUsername: null,\n    cookie: document.cookie.includes('crowddit='),\n    username: document.cookie.slice(document.cookie.indexOf('crowddit') + 9),\n    invalidLoginAttempt: false,\n    createUserAlert: false,\n    page: \"/\",\n    initAccountAlert: false,\n    showAuthAlert: true,\n    auth: false\n}\n\nexport default (state = INITIAL, action) => {\n    switch(action.type) {\n        case C.TOGGLE_LOGIN:\n            return {\n                ...state,\n                showLoginModal: !state.showLoginModal,\n                invalidLoginAttempt: false\n            }\n        case C.USERNAME_BLUR:\n            return {\n                ...state,\n                validUsername: action.payload.status,\n                createUserAlert: false\n            }\n        case C.PASSWORD_BLUR:\n            return {\n                ...state,\n                validPassword: action.payload.status,\n                createUserAlert: false\n            }\n        case C.COOKIE:\n            return {\n                ...state,\n                cookie: document.cookie.includes('crowddit=')\n            }\n        case C.CREATE_USER: \n            return {\n                ...state,\n                username: action.payload.username,\n                showLoginModal: false,\n                initAccountAlert: true\n            }\n        case C.LOGOUT: {\n            return {\n                ...INITIAL\n            }\n        }\n        case C.LOGIN: {\n            return {\n                ...state,\n                showLoginModal: false,\n                username: action.payload.username,\n                cookie: true,\n                invalidLoginAttempt: false,\n                initAccountAlert: false,\n                auth: true\n            }\n        }\n        case C.GET_ASSOCIATIONS:\n            return {\n                ...state,\n                showLoginModal: false,\n                username: action.payload.username,\n                cookie: true,\n                invalidLoginAttempt: false,\n                initAccountAlert: true,\n                auth: false\n            }\n        case C.INVALID_LOGIN: {\n            return {\n                ...state,\n                invalidLoginAttempt: true\n            }\n        }\n        case C.DISMISS_LOGIN_ALERT:\n            return {\n                ...state,\n                invalidLoginAttempt: false\n            }\n\n        case C.CREATE_USER_ALERT: {\n            return {\n                ...state,\n                createUserAlert: true\n            }\n        }\n        case C.SET_PAGE: {\n            return {\n                ...state,\n                page: action.payload\n            }\n        }\n        case C.DISMISS_AUTH_ALERT: \n            return {\n                ...state,\n                showAuthAlert: false\n            }\n        case C.AUTH_SUCCESS: {\n            return {\n                ...state,\n                auth: true\n            }\n        }\n        case C.AUTH_FAIL: {\n            return {\n                ...state,\n                auth: false\n            }\n        }\n        case C.REVOKE_AUTH: {\n            return {\n                ...state,\n                auth: false\n            }\n        } \n\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\nimport app from './app'\n\nlet createRootReducer = history => combineReducers({\n    router: connectRouter(history),\n    app\n})\n\nexport default createRootReducer\n\n\n\n\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { routerMiddleware, connectRouter } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../reducers'\n\nexport let history = createBrowserHistory()\n\nlet middlewares = [\n    routerMiddleware(history),\n    thunk,\n    logger\n]\n\nlet enhancers = [applyMiddleware(...middlewares)]\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    blacklist: ['router']\n}\n\nlet persistedReducer = persistReducer(\n    persistConfig,\n    rootReducer(history)\n)\n\nlet store = createStore(\n    persistedReducer,\n    undefined, \n    compose(...enhancers)\n)\n\nlet persistor = persistStore(store)\n\nexport default () => {\n    return { store, persistor }\n}\n\n\n\n\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/storage'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes'\nimport { ConnectedRouter } from 'connected-react-router'\nimport configureStore, { history } from './store'\n\nlet { store, persistor } = configureStore()\nwindow.store = store\nwindow.persistor = persistor\nexport let getStore = () => { return store }\n\nconsole.log(store, persistor)\n\nrender(\n  <Provider store={ store }>\n      <ConnectedRouter history={ history }>\n        <Routes />\n      </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}