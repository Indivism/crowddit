{"version":3,"sources":["logo.svg","constants.js","reducers/app.js","reducers/index.js","components/presentationals/login.js","actions/index.js","components/containers/login.js","components/presentationals/navbar.js","components/containers/navbar.js","App.js","serviceWorker.js","components/containers/createAccount.js","components/presentationals/createAccount.js","routes.js","index.js"],"names":["module","exports","HEROKU_BACKEND","INITIAL","showLoginModal","validUsername","cookie","document","includes","username","slice","indexOf","invalidLoginAttempt","combineReducers","app","state","action","type","payload","status","validPassword","ModalExample","props","className","console","log","Container","Modal","isOpen","modal","toggle","centered","style","height","id","marginLeft","paddingTop","Form","onSubmit","e","preventDefault","login","getElementById","value","password","FormGroup","Label","for","hidden","Input","name","placeholder","Button","Alert","color","dismissLoginAttemptAlert","fontSize","href","paddingLeft","fontWeight","usernameBlur","a","url","C","querystring","stringify","options","method","fetch","then","response","json","catch","err","passwordBlur","createUser","trim","res","connect","store","ownProps","dispatch","fields","A","Login","NavigationBar","useState","setIsOpen","Navbar","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","NavbarText","paddingRight","outline","logout","test","init_data","App","Boolean","window","location","hostname","match","marginTop","onBlur","target","invalid","valid","FormFeedback","FormText","secondary","basename","process","exact","path","createStore","rootReducer","applyMiddleware","thunk","logger","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e634501a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export let TOGGLE_LOGIN = 'TOGGLE_LOGIN'\nexport let USERNAME_BLUR = 'USERNAME_BLUR'\nexport let PASSWORD_BLUR = 'PASSWORD_BLUR'\nexport let CREATE_USER = 'CREATE_USER'\nexport let COOKIE = 'COOKIE'\nexport let LOGOUT = 'LOGOUT'\nexport let LOGIN = 'LOGIN'\nexport let INVALID_LOGIN = 'INVALID_LOGIN'\nexport let DISMISS_LOGIN_ALERT = 'DISMISS_LOGIN_ALERT'\n\nexport let HEROKU_BACKEND = 'https://crowddit-backend.herokuapp.com'\nexport let GH_PAGES = \"https://indivism.github.io/crowddit\"","import * as C from '../constants'\n\nconst INITIAL = {\n    showLoginModal: false,\n    validUsername: null,\n    cookie: document.cookie.includes('crowddit='),\n    username: document.cookie.slice(document.cookie.indexOf('crowddit') + 9),\n    invalidLoginAttempt: false\n}\n\nexport default (state = INITIAL, action) => {\n    switch(action.type) {\n        case C.TOGGLE_LOGIN:\n            return {\n                ...state,\n                showLoginModal: !state.showLoginModal\n            }\n        case C.USERNAME_BLUR:\n            return {\n                ...state,\n                validUsername: action.payload.status,\n            }\n        case C.PASSWORD_BLUR:\n            return {\n                ...state,\n                validPassword: action.payload.status\n            }\n        case C.COOKIE:\n            return {\n                ...state,\n                cookie: document.cookie.includes('crowddit=')\n            }\n        case C.CREATE_USER: \n            return {\n                ...state,\n                username: action.payload.username\n            }\n        case C.LOGOUT: {\n            return {\n                ...state,\n                cookie: false\n            }\n        }\n        case C.LOGIN: {\n            return {\n                ...state,\n                showLoginModal: false,\n                username: action.payload.username,\n                cookie: true,\n                invalidLoginAttempt: false\n            }\n        }\n        case C.INVALID_LOGIN: {\n            return {\n                ...state,\n                invalidLoginAttempt: true\n            }\n        }\n        case C.DISMISS_LOGIN_ALERT:\n            return {\n                ...state,\n                invalidLoginAttempt: false\n            }\n\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport app from './app'\n\nexport default combineReducers({\n    app\n})\n\n\n\n\n","import React, { useState } from 'react';\nimport { Button, Modal, Container, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\nimport Blob from './blob'\nimport * as C from '../../constants'\n\nconst ModalExample = (props) => {\n  const {\n    className\n  } = props;\n\n  console.log(props)\n\n  return (\n    <Container>\n        <Modal isOpen={props.modal} toggle={props.toggle} className={className} centered>\n            <div className=\"row\" style={{height: 350}}>\n                <div className=\"col-sm-3\" id=\"login-gradient-box\"></div>\n                <div className=\"col\" style={{marginLeft: '1rem'}}>\n                    <div className=\"row\" id=\"login-text\">Sign in</div>\n                    <div className=\"row\" style={{paddingTop: '1rem'}}>\n                        <Form onSubmit={ e => { e.preventDefault(); props.login({\n                            username: document.getElementById('inputUsername').value, \n                            password: document.getElementById('inputPassword').value\n                            }) }}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\" hidden>Username</Label>\n                                <Input type=\"username\" name=\"username\" id=\"inputUsername\" placeholder=\"Username\" />\n                  \n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"inputPassword\" hidden>Password</Label>\n                                <Input type=\"password\" name=\"password\" id=\"inputPassword\" placeholder=\"Password\" />\n                            </FormGroup>\n                            {!props.invalidLoginAttempt && <Button style={{height: '2rem'}} id='login-text-button'>SIGN IN</Button>}\n                            <Alert \n                            color=\"danger\"\n                            isOpen={props.invalidLoginAttempt}\n                            toggle={() => { props.dismissLoginAttemptAlert() }}>\n                                Invalid username or password</Alert>\n                        </Form>\n                    </div>\n                    <div className=\"row\" style={{fontSize: \"small\", paddingTop: '1rem'}}>\n                        <p> New to Crowddit? </p>\n                        <a href= {'https://indivism.github.io/crowddit/createUser'} style={{paddingLeft: '0.5rem', fontWeight: \"bold\"}}> SIGN UP </a>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    </Container>\n  );\n}\n\nexport default ModalExample;","import * as C from '../constants'\nimport querystring from 'query-string'\n\n\nexport let toggleLogin = () => {\n    return { type: C.TOGGLE_LOGIN }\n}\n\nexport let usernameBlur = async payload => {\n\n    let url = C.HEROKU_BACKEND + \"/db/checkUsername?\" + querystring.stringify({username: payload})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n    if(response && response.status) {\n        return {type: C.USERNAME_BLUR, payload: { status: response.status == 'success' ? true : false }}\n    } else {\n        return {type: C.USERNAME_BLUR, payload: { status: false }}\n    }\n} \n\nexport let passwordBlur = async payload => {\n\n    let url = C.HEROKU_BACKEND + \"/db/checkPassword?\" + querystring.stringify({password: payload})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n\n    if(response && response.status) {\n        return {type: C.PASSWORD_BLUR, payload: { status: response.status == 'success' ? true : false }}\n    } else {\n        return {type: C.PASSWORD_BLUR, payload: { status: false }}\n    }\n}\n\nexport let createUser = async () => {\n    \n    let username = document.getElementById(\"username-input\").value.trim()\n    let password = document.getElementById(\"password-input\").value.trim() \n\n    console.log(username, password)\n\n    let url = C.HEROKU_BACKEND + \"/db/createUser?\" + querystring.stringify({username, password})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n\n    console.log(response)\n    if(response.status == 'success') {\n        console.log(\"setting cookie\")\n        document.cookie = 'crowddit=' + response.username\n        // document.location = 'https://indivism.github.io/crowddit/'\n        return {type: C.CREATE_USER, payload: { status: true, username }}\n    } else {\n        return {type: C.CREATE_USER, payload: { status: false, username }}\n    }\n\n}\n\nexport let cookie = () => ({\n    type: C.COOKIE\n})\n\nexport let logout = () => {\n    document.cookie = 'crowddit' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    return { type: C.LOGOUT }\n}\n\nexport let login = async ({ username, password }) => {\n\n    let url = C.HEROKU_BACKEND + \"/db/login?\" + querystring.stringify({username, password})\n\n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(res => res.json())\n        .then(json => json)\n    \n    console.log(\"response\", response)\n\n    if(response.status == \"success\") {\n        return { type: C.LOGIN, payload: { username: response.username } }\n    } else {\n        return { type: C.INVALID_LOGIN }\n    }\n}\n\nexport let dismissLoginAlert = () => ({ type: C.DISMISS_LOGIN_ALERT })","import { connect } from 'react-redux'\nimport Login from '../presentationals/login'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    modal: store.app.showLoginModal,\n    invalidLoginAttempt: store.app.invalidLoginAttempt\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggle: () => dispatch(A.toggleLogin()),\n    login: async fields => dispatch(await A.login(fields)),\n    dismissLoginAttemptAlert: () => dispatch(A.dismissLoginAlert())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { useState } from 'react'\nimport {\n    Button,\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    NavbarText\n  } from 'reactstrap';\n\nconst NavigationBar = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n\n    return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href={'https://indivism.github.io/crowddit/'}>crowddit</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/about/\">About</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/Indivism/crowddit\">GitHub</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n        {props.cookie && <NavbarText style={{paddingRight: \"1rem\"}}>{props.username}</NavbarText>}\n        {props.cookie && <Button outline color=\"secondary\" onClick={ () => props.logout() }>Log Out</Button>}\n        {!props.cookie && <Button outline color=\"secondary\" onClick={ () => props.login() }>Log In</Button>}\n      </Navbar>\n    </div>\n    )\n}\n\nexport default NavigationBar","import { connect } from 'react-redux'\nimport NavigationBar from '../presentationals/navbar'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    test: store.app.init_data,\n    cookie: store.app.cookie,\n    username: store.app.username\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        login: () => { dispatch(A.toggleLogin()) },\n        logout: () => { dispatch(A.logout()) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar)","import React from 'react';\nimport logo from './logo.svg';\nimport Login from './components/containers/login'\nimport NavigationBar from './components/containers/navbar'\n\nfunction App() {\n  return (\n    <div>\n      <NavigationBar></NavigationBar>\n      <Login></Login>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { connect } from 'react-redux'\nimport createAccount from '../presentationals/createAccount'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    validUsername: store.app.validUsername,\n    validPassword: store.app.validPassword\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    usernameBlur: async e =>  dispatch(await A.usernameBlur(e)),\n    passwordBlur: async e => dispatch(await A.passwordBlur(e)),\n    createUser: async e => { dispatch(await A.createUser()); dispatch(A.cookie()) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(createAccount)","import React from 'react'\nimport NavigationBar from '../containers/navbar'\nimport { Form, FormGroup, Label, Input, FormFeedback, FormText, Button } from 'reactstrap';\n\n\nexport default props => {\n    return (\n        <div>\n            <NavigationBar  />\n            <div className=\"container\" style={{marginTop: '3rem'}}>\n            <Form onSubmit={e => { e.preventDefault(); props.createUser()}}>\n                <FormGroup onBlur={ e => props.usernameBlur(e.target.value.trim()) }>\n                    <Label for=\"exampleEmail\">Username</Label>\n                    <Input \n                        id=\"username-input\" \n                        invalid = {props.validUsername === false && document.getElementById(\"username-input\").value.trim() != \"\"} \n                        valid = {props.validUsername === true} />\n                    {props.validUsername && <FormFeedback valid>Sweet! That username is available.</FormFeedback>}\n                    {props.validUsername === false && <FormFeedback invalid>That username is invalid or already taken.</FormFeedback>}\n                    <FormText>Usernames can contain lowercase and uppercase letters and numbers.</FormText>\n                </FormGroup>\n                <FormGroup onBlur={ e => props.passwordBlur(e.target.value.trim()) } >\n                    <Label for=\"examplePassword\">Password</Label>\n                    <Input \n                        id=\"password-input\" \n                        invalid = {props.validPassword === false && document.getElementById(\"password-input\").value.trim() != \"\"} \n                        valid = {props.validPassword === true} />\n                    {props.validPassword && <FormFeedback valid>Great! This is a valid password.</FormFeedback>}\n                    {props.validPassword === false && <FormFeedback invalid>Oh no! That password is invalid. Please try again. </FormFeedback>}\n                    <FormText>Passwords must contain at least one numeric character and 1 capital letter.</FormText>\n                </FormGroup>\n                <Button \n                    id='login-text-button'\n                    secondary>\n                        SIGN UP\n                </Button>\n            </Form>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    HashRouter,\n    Link\n  } from \"react-router-dom\"\nimport App from './App'\nimport CreateAccount from './components/containers/createAccount'\n\nexport default () => (\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route exact path=\"/createUser\">\n                <CreateAccount />\n            </Route>\n            <Route path=\"/\">\n                <App />\n            </Route>\n        </Switch>\n    </Router>\n)","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport rootReducer from './reducers/index';\nimport logger from 'redux-logger'\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk, logger)\n)\n\nwindow.store = store\n\nrender(\n  <Provider store={ store }>\n    <Routes />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}