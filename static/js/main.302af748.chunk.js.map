{"version":3,"sources":["logo.svg","constants.js","reducers/app.js","reducers/index.js","serviceWorker.js","components/presentationals/login.js","actions/index.js","components/containers/login.js","components/presentationals/navbar.js","components/containers/navbar.js","components/containers/AccountInitAlert.js","components/presentationals/AccountInitAlert.js","App.js","components/containers/AuthAlert.js","components/presentationals/AuthAlert.js","components/containers/settings.js","components/presentationals/settings.js","components/containers/createAccount.js","components/presentationals/createAccount.js","routes.js","store/index.js","index.js"],"names":["module","exports","HEROKU_BACKEND","INITIAL","showLoginModal","validUsername","cookie","document","includes","username","slice","indexOf","invalidLoginAttempt","createUserAlert","page","initAccountAlert","showAuthAlert","state","action","type","payload","status","validPassword","createRootReducer","history","combineReducers","router","connectRouter","app","Boolean","window","location","hostname","match","ModalExample","props","className","console","log","Container","Modal","isOpen","modal","toggle","centered","style","height","id","marginLeft","paddingTop","Form","onSubmit","e","preventDefault","login","getElementById","value","password","FormGroup","Label","for","hidden","Input","name","placeholder","Button","Alert","color","dismissLoginAttemptAlert","fontSize","to","paddingLeft","fontWeight","usernameBlur","a","url","C","querystring","stringify","options","method","fetch","then","response","json","catch","err","passwordBlur","createUser","trim","res","url_associations","crowddit","data","toggleCreateAccountAlert","auth","auth_url","connect","store","ownProps","dispatch","fields","A","Login","NavigationBar","useState","setIsOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","setPage","cursor","NavbarText","paddingRight","outline","logout","test","init_data","showInitAlert","padding","App","visible","dismiss","toString","Jumbotron","toggleUserAlert","authenticated","marginTop","onBlur","target","invalid","valid","FormFeedback","FormText","secondary","exact","path","createBrowserHistory","persistConfig","key","storage","whitelist","createStore","persistReducer","compose","applyMiddleware","routerMiddleware","thunk","logger","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.302af748.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export let TOGGLE_LOGIN = 'TOGGLE_LOGIN'\nexport let USERNAME_BLUR = 'USERNAME_BLUR'\nexport let PASSWORD_BLUR = 'PASSWORD_BLUR'\nexport let CREATE_USER = 'CREATE_USER'\nexport let COOKIE = 'COOKIE'\nexport let LOGOUT = 'LOGOUT'\nexport let LOGIN = 'LOGIN'\nexport let INVALID_LOGIN = 'INVALID_LOGIN'\nexport let DISMISS_LOGIN_ALERT = 'DISMISS_LOGIN_ALERT'\nexport let CREATE_USER_ALERT = 'CREATE_USER_ALERT'\nexport let DEFAULT = 'DEFAULT'\nexport let SET_PAGE = 'SET_PAGE'\nexport let GET_ASSOCIATIONS = 'GET_ASSOCIATIONS'\nexport let AUTH='AUTH'\nexport let DISMISS_AUTH_ALERT='DISMISS_AUTH_ALERT'\n\nexport let CHECK_CROWDDIT_AUTH_STATUS = 'CHECK_CROWDDIT_AUTH_STATUS'\n\nexport let HEROKU_BACKEND = 'https://crowddit-backend.herokuapp.com'\nexport let GH_PAGES = \"https://indivism.github.io/crowddit\"","import * as C from '../constants'\n\nconst INITIAL = {\n    showLoginModal: false,\n    validUsername: null,\n    cookie: document.cookie.includes('crowddit='),\n    username: document.cookie.slice(document.cookie.indexOf('crowddit') + 9),\n    invalidLoginAttempt: false,\n    createUserAlert: false,\n    page: \"/\",\n    initAccountAlert: false,\n    showAuthAlert: true\n}\n\nexport default (state = INITIAL, action) => {\n    switch(action.type) {\n        case C.TOGGLE_LOGIN:\n            return {\n                ...state,\n                showLoginModal: !state.showLoginModal,\n                invalidLoginAttempt: false\n            }\n        case C.USERNAME_BLUR:\n            return {\n                ...state,\n                validUsername: action.payload.status,\n                createUserAlert: false\n            }\n        case C.PASSWORD_BLUR:\n            return {\n                ...state,\n                validPassword: action.payload.status,\n                createUserAlert: false\n            }\n        case C.COOKIE:\n            return {\n                ...state,\n                cookie: document.cookie.includes('crowddit=')\n            }\n        case C.CREATE_USER: \n            return {\n                ...state,\n                username: action.payload.username,\n                showLoginModal: false,\n                initAccountAlert: true\n            }\n        case C.LOGOUT: {\n            return {\n                ...state,\n                cookie: false,\n                initAccountAlert: false\n            }\n        }\n        case C.LOGIN: {\n            return {\n                ...state,\n                showLoginModal: false,\n                username: action.payload.username,\n                cookie: true,\n                invalidLoginAttempt: false\n            }\n        }\n        case C.GET_ASSOCIATIONS:\n            return {\n                ...state,\n                showLoginModal: false,\n                username: action.payload.username,\n                cookie: true,\n                invalidLoginAttempt: false,\n                initAccountAlert: true\n            }\n        case C.INVALID_LOGIN: {\n            return {\n                ...state,\n                invalidLoginAttempt: true\n            }\n        }\n        case C.DISMISS_LOGIN_ALERT:\n            return {\n                ...state,\n                invalidLoginAttempt: false\n            }\n\n        case C.CREATE_USER_ALERT: {\n            return {\n                ...state,\n                createUserAlert: true\n            }\n        }\n        case C.SET_PAGE: {\n            return {\n                ...state,\n                page: action.payload\n            }\n        }\n        case C.DISMISS_AUTH_ALERT: \n            return {\n                ...state,\n                showAuthAlert: false\n            }\n\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\nimport app from './app'\n\nlet createRootReducer = history => combineReducers({\n    router: connectRouter(history),\n    app\n})\n\nexport default createRootReducer\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport { Button, Modal, Container, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\nimport Blob from './blob'\nimport * as C from '../../constants'\nimport { Link } from 'react-router-dom'\n\nconst ModalExample = (props) => {\n  const {\n    className\n  } = props;\n\n  console.log(props)\n\n  return (\n    <Container>\n        <Modal isOpen={props.modal} toggle={props.toggle} className={className} centered>\n            <div className=\"row\" style={{height: 350}}>\n                <div className=\"col-sm-3\" id=\"login-gradient-box\"></div>\n                <div className=\"col\" style={{marginLeft: '1rem'}}>\n                    <div className=\"row\" id=\"login-text\">Sign in</div>\n                    <div className=\"row\" style={{paddingTop: '1rem'}}>\n                        <Form onSubmit={ e => { e.preventDefault(); props.login({\n                            username: document.getElementById('inputUsername').value, \n                            password: document.getElementById('inputPassword').value\n                            }) }}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\" hidden>Username</Label>\n                                <Input type=\"username\" name=\"username\" id=\"inputUsername\" placeholder=\"Username\" />\n                  \n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"inputPassword\" hidden>Password</Label>\n                                <Input type=\"password\" name=\"password\" id=\"inputPassword\" placeholder=\"Password\" />\n                            </FormGroup>\n                            {!props.invalidLoginAttempt && <Button style={{height: '2rem'}} id='login-text-button'>SIGN IN</Button>}\n                            <Alert \n                            color=\"danger\"\n                            isOpen={props.invalidLoginAttempt}\n                            toggle={() => { props.dismissLoginAttemptAlert() }}>\n                                Invalid username or password</Alert>\n                        </Form>\n                    </div>\n                    <div className=\"row\" style={{fontSize: \"small\", paddingTop: '1rem'}}>\n                        <p> New to Crowddit? </p>\n                        <Link to='/createUser' style={{paddingLeft: '0.5rem', fontWeight: \"bold\"}}> SIGN UP </Link>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    </Container>\n  );\n}\n\nexport default ModalExample;","import * as C from '../constants'\nimport querystring from 'query-string'\n\n\nexport let toggleLogin = () => {\n    return { type: C.TOGGLE_LOGIN }\n}\n\nexport let usernameBlur = async payload => {\n\n    if(payload === \"\")\n        return { type: C.DEFAULT }\n\n    let url = C.HEROKU_BACKEND + \"/db/checkUsername?\" + querystring.stringify({username: payload})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n    if(response && response.status) {\n        return {type: C.USERNAME_BLUR, payload: { status: response.status == 'success' ? true : false }}\n    } else {\n        return {type: C.USERNAME_BLUR, payload: { status: false }}\n    }\n} \n\nexport let passwordBlur = async payload => {\n\n    if(payload === \"\")\n        return { type: C.DEFAULT }\n\n    let url = C.HEROKU_BACKEND + \"/db/checkPassword?\" + querystring.stringify({password: payload})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n\n    if(response && response.status) {\n        return {type: C.PASSWORD_BLUR, payload: { status: response.status === 'success' ? true : false }}\n    } else {\n        return {type: C.PASSWORD_BLUR, payload: { status: false }}\n    }\n}\n\nexport let createUser = async () => {\n    \n    let username = document.getElementById(\"username-input\").value.trim()\n    let password = document.getElementById(\"password-input\").value.trim()\n\n    console.log(username, password)\n\n    if(username === password && username === \"\")\n        return { type: C.CREATE_USER_ALERT }\n\n    let url = C.HEROKU_BACKEND + \"/db/createUser?\" + querystring.stringify({username, password})\n    \n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(response => response.json())\n        .then(json => json)\n        .catch(err => console.log(err))\n\n    console.log(response)\n    if(response.status === 'success') {\n        console.log(\"setting cookie\")\n        document.cookie = 'crowddit=' + response.username\n        return {type: C.CREATE_USER, payload: { status: true, username }}\n    } else {\n        return {type: C.CREATE_USER, payload: { status: false, username }}\n    }\n\n}\n\nexport let cookie = () => ({\n    type: C.COOKIE\n})\n\nexport let logout = () => {\n    document.cookie = 'crowddit' + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    window.location = 'https://indivism.github.io/crowddit/#/'\n    return { type: C.LOGOUT }\n}\n\nexport let login = async ({ username, password }) => {\n\n    let url = C.HEROKU_BACKEND + \"/db/login?\" + querystring.stringify({username, password})\n\n    let options = {\n        method: 'GET'\n    }\n\n    let response = await fetch(url, options)\n        .then(res => res.json())\n        .then(json => json)\n    \n    console.log(\"response\", response)\n\n    \n\n    if(response.status === \"success\") {\n\n        let url_associations = C.HEROKU_BACKEND + '/db/getAssociations?' + querystring.stringify({ crowddit: response.username })\n        let data = await fetch(url_associations, options)\n            .then(res => res.json())\n            .then(json => json)\n        \n        console.log(data.data)\n        if(data.data) {\n            return { type: C.LOGIN, payload: { username: response.username } }\n        } else {\n            return { type: C.GET_ASSOCIATIONS, payload: { username: response.username } }\n        }\n    } else {\n        return { type: C.INVALID_LOGIN }\n    }\n}\n\nexport let dismissLoginAlert = () => ({ type: C.DISMISS_LOGIN_ALERT })\n\nexport let toggleCreateAccountAlert = () => {\n    let username = document.getElementById(\"username-input\").value.trim() === \"\"\n    let password = document.getElementById(\"password-input\").value.trim() === \"\"\n    console.log(\"check me: \", username, password)\n    if(username && password) {\n        return { type: C.CREATE_USER_ALERT }\n    } else {\n        return { type: C.DEFAULT }\n    }\n}\n\nexport let setPage = page => ({ type: C.SET_PAGE, payload: page })\n\nexport let auth = async crowddit => {\n\n    let options = {\n        method: 'GET'\n    }\n\n    let url = C.HEROKU_BACKEND + '/reddit/auth?' + querystring.stringify({ crowddit })\n\n    fetch(url, options)\n        .then(res => res.json())\n        .then(json => {\n            if(json.auth_url) {\n                window.location = json.auth_url\n            }\n        })\n\n    return {\n        type: C.AUTH\n    }\n}\n\nexport let dismissAuthAlert = () => ({ type: C.DISMISS_AUTH_ALERT })\n\nexport let checkCrowdditAuthStatus = () => ({ type: C.CHECK_CROWDDIT_AUTH_STATUS })\n","import { connect } from 'react-redux'\nimport Login from '../presentationals/login'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    modal: store.app.showLoginModal,\n    invalidLoginAttempt: store.app.invalidLoginAttempt\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggle: () => dispatch(A.toggleLogin()),\n    login: async fields => dispatch(await A.login(fields)),\n    dismissLoginAttemptAlert: () => dispatch(A.dismissLoginAlert())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { useState } from 'react'\nimport {\n    Button,\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    NavbarText\n  } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom'\n\nconst NavigationBar = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n  console.log(props)\n\n    return (\n    <div>\n      {props.page === \"/settings\" && <Redirect to=\"/settings\" />}\n      {props.page === \"/about\" && <Redirect to=\"/about\" />}\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href={'https://indivism.github.io/crowddit/'}>crowddit</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/about/\">About</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/Indivism/crowddit\">GitHub</NavLink>\n            </NavItem>\n            { props.cookie && <NavItem>\n              <NavLink onClick={() => { props.setPage(\"/settings\") }} style={{cursor: \"pointer\"}}>Settings</NavLink>\n            </NavItem>}\n          </Nav>\n        </Collapse>\n        \n        {props.cookie && <NavbarText style={{paddingRight: \"1rem\"}}>{props.username}</NavbarText>}\n        {props.cookie && <Button outline color=\"secondary\" onClick={ () => props.logout() }>Log Out</Button>}\n        {!props.cookie && <Button outline color=\"secondary\" onClick={ () => props.login() }>Log In</Button>}\n        \n      </Navbar>\n    </div>\n    )\n}\n\nexport default NavigationBar\n","import { connect } from 'react-redux'\nimport NavigationBar from '../presentationals/navbar'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    test: store.app.init_data,\n    cookie: store.app.cookie,\n    username: store.app.username,\n    page: store.app.page\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        login: () => { dispatch(A.toggleLogin()) },\n        logout: () => { dispatch(A.logout()) },\n        setPage: page => { dispatch(A.setPage(page)) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar)","import { connect } from 'react-redux'\nimport AccountInitAlert from '../presentationals/AccountInitAlert'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    showInitAlert: store.app.initAccountAlert\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountInitAlert)","import React from 'react'\nimport { Alert } from 'reactstrap'\nimport { Link } from 'react-router-dom'\n\nexport default props => {\n    console.log(props)\n        return props.showInitAlert ? (<div className=\"container-fluid\">\n            <div className=\"row justify-content-center\" style={{padding: '1rem'}}>\n                <div className = \"col-sm-10\">\n                    <Alert className=\"text-center\" color=\"info\">To use Crowddit, you need to authenticate your Reddit account. Do so within the Crowddit <Link className=\"alert-link\" to=\"/settings\">account settings</Link>.</Alert>\n                </div>\n            </div>\n        </div>) : <div></div>\n}","import React from 'react';\nimport logo from './logo.svg';\nimport Login from './components/containers/login'\nimport NavigationBar from './components/containers/navbar'\nimport AccountInitAlert from './components/containers/AccountInitAlert'\n\nfunction App() {\n  return (\n    <div>\n      <NavigationBar />\n      <Login />\n      <AccountInitAlert />\n    </div>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux'\nimport AuthAlert from '../presentationals/AuthAlert'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    visible: store.app.showAuthAlert\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dismiss: () => { dispatch(A.dismissAuthAlert()) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthAlert)","import React from 'react'\nimport { Alert } from 'reactstrap';\n\nexport default props => (\n    <div className=\"container-fluid\">\n        {window.location.toString().includes(\"success=insert\") && (\n            <div className=\"row  justify-content-center\" style={{padding: '1rem'}}>\n            <div className = \"col-6\">\n                <Alert className=\"text-center\" color=\"success\" isOpen={props.visible} toggle={() => props.dismiss()}>Successfully authenticated Reddit. At any time, you may revoke Crowddit's access within account settings.</Alert>\n            </div>\n        </div>\n        )}\n        {window.location.toString().includes(\"error=fail\") && (\n            <div className=\"row  justify-content-center\" style={{padding: '1rem'}}>\n            <div className = \"col-6\">\n                <Alert className=\"text-center\" color=\"danger\" isOpen={props.visible} toggle={() => props.dismiss()}>Hmm. Crowddit could not connect to Reddit. Try to join the Crowd again.</Alert>\n            </div>\n        </div>\n        )}\n        {window.location.toString().includes(\"error=conflict\") && (\n            <div className=\"row  justify-content-center\" style={{padding: '1rem'}}>\n            <div className = \"col-6\">\n                <Alert className=\"text-center\" color=\"warning\" isOpen={props.visible} toggle={() => props.dismiss()}>There appears to be an internal service error.</Alert>\n            </div>\n        </div>\n        )}\n    </div>\n)","import { connect } from 'react-redux'\nimport Settings from '../presentationals/settings'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    crowddit: store.app.username\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    auth: async e => { dispatch( await A.auth(e)) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings)","import React from 'react'\nimport NavigationBar from '../containers/navbar'\nimport { Nav, NavItem, NavLink, Jumbotron, Button, Form } from 'reactstrap';\nimport AuthAlert from '../containers/AuthAlert'\n\nexport default props => {\n    return (\n        <div>\n            <NavigationBar />\n            <AuthAlert />\n            <div className = \"container-fluid\" style={{padding: '3rem'}}>\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-6 justify-contents-center\">\n                        <Jumbotron>\n                            <h1 className=\"display-5\">Authenticate your Reddit</h1>\n                            <p className=\"lead\">Crowddit uses Reddit's API to uncover other subreddits that you may be interested in.</p>\n                            <hr />\n                            <p>Tokenized access ensures Crowddit will never ask for your password.</p>\n                            <p className=\"lead\">\n                                <Button color=\"primary\" onClick={() => { props.auth(props.crowddit) }}>Join the Crowdd</Button>\n                            </p>\n                        </Jumbotron>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import { connect } from 'react-redux'\nimport createAccount from '../presentationals/createAccount'\nimport * as C from '../../constants' \nimport * as A from '../../actions'\n\nconst mapStateToProps = (store, ownProps) => ({\n    validUsername: store.app.validUsername,\n    validPassword: store.app.validPassword,\n    toggleUserAlert: store.app.createUserAlert,\n    authenticated: store.app.cookie\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    usernameBlur: async e =>  dispatch(await A.usernameBlur(e)),\n    passwordBlur: async e => dispatch(await A.passwordBlur(e)),\n    createUser: async e => { dispatch(await A.createUser()); dispatch(A.cookie()) },\n    createUserAlert: async () => { await dispatch(A.toggleCreateAccountAlert()) }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(createAccount)","import React from 'react'\nimport NavigationBar from '../containers/navbar'\nimport { Form, FormGroup, Label, Input, FormFeedback, FormText, Button, Alert } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom'\n\n\nexport default props => {\n\n    console.log(\"check me\", props)\n    return (\n        <div>\n            {props.authenticated && <Redirect to=\"/\" />}\n            <NavigationBar  />\n            <div className=\"container\" style={{marginTop: '3rem'}}>\n            <Form onSubmit={async e => { e.preventDefault();  await props.createUser(); }}>\n                <FormGroup onBlur={ e => props.usernameBlur(e.target.value.trim()) }>\n                    <Label for=\"exampleEmail\">Username</Label>\n                    <Input \n                        id=\"username-input\" \n                        invalid = {props.validUsername === false && document.getElementById(\"username-input\").value.trim() !== \"\"} \n                        valid = {props.validUsername === true} />\n                    {props.validUsername && <FormFeedback valid>Sweet! That username is available.</FormFeedback>}\n                    {props.validUsername === false && <FormFeedback invalid>That username is invalid or already taken.</FormFeedback>}\n                    <FormText>Usernames can contain lowercase and uppercase letters and numbers.</FormText>\n                </FormGroup>\n                <FormGroup onBlur={ e => props.passwordBlur(e.target.value.trim()) } >\n                    <Label for=\"examplePassword\">Password</Label>\n                    <Input \n                        id=\"password-input\" \n                        invalid = {props.validPassword === false && document.getElementById(\"password-input\").value.trim() !== \"\"} \n                        valid = {props.validPassword === true} />\n                    {props.validPassword && <FormFeedback valid>Great! This is a valid password.</FormFeedback>}\n                    {props.validPassword === false && <FormFeedback invalid>Oh no! That password is invalid. Please try again. </FormFeedback>}\n                    <FormText>Passwords must contain at least one numeric character and 1 capital letter.</FormText>\n                </FormGroup>\n                {props.toggleUserAlert && <Alert>Please input a username and password to sign in.</Alert>}\n                <Button \n                    id='login-text-button'\n                    secondary>\n                        <Link \n                        to={props.toggleUserAlert ? \"/createUser\"  : \"/\"} \n                        style={{ color: 'white' }} \n                        onClick={() => props.createUserAlert()}>\n                            SIGN UP</Link>\n                </Button>\n            </Form>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport {\n    // BrowserRouter as Router,\n    Switch,\n    Route,\n    HashRouter as Router,\n    Link\n  } from \"react-router-dom\"\n\nimport App from './App'\nimport Settings from './components/containers/settings'\nimport CreateAccount from './components/containers/createAccount'\n\nexport default () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\">\n                <App />\n            </Route>\n            <Route path=\"/createUser\">\n                <CreateAccount />\n            </Route>\n            <Route path=\"/settings\">\n                <Settings />\n            </Route>\n        </Switch>\n    </Router>\n)","import { createStore, applyMiddleware, compose } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createRootReducer from '../reducers'\n\nexport let history = createBrowserHistory()\n\nconst persistConfig = {\n    key: 'app',\n    storage,\n    whitelist: ['app']\n}\n\nexport default () => {\n    return createStore(\n        persistReducer(persistConfig, createRootReducer(history)),\n        compose(\n            applyMiddleware(\n                routerMiddleware(history),\n                thunk,\n                logger\n            )\n        )\n    )\n}\n\n\n\n\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/lib/storage'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from './reducers/index';\nimport logger from 'redux-logger'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes'\nimport { ConnectedRouter } from 'connected-react-router'\nimport configureStore, { history } from './store'\n\nlet store = configureStore()\n\nrender(\n  <Provider store={ store }>\n      <ConnectedRouter history={ history }>\n        <Routes />\n      </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}